//============================================== Network Cred ==============================================
#define WIFI_SSID "_Vanilla"
#define WIFI_PASSWORD "Smooores"
//============================================== InfluxDB Def ==============================================
#include <Wire.h>                                                 
#include <WiFiMulti.h>
WiFiMulti wifiMulti;
#define DEVICE "ESP32"

#include <InfluxDbClient.h>
#include <InfluxDbCloud.h>

#define INFLUXDB_URL "https://ap-southeast-2-1.aws.cloud2.influxdata.com"
#define INFLUXDB_TOKEN "Zi_mqBGLenYtCq627fGM2mZb7mkWk4N1QKpfhOAQSDopUTVhLdCZ2lwItg4Ou6AZXtsB4Fko35BLSvaBOsoqaA=="
#define INFLUXDB_ORG "stephenrichard19@gmail.com"
#define INFLUXDB_BUCKET "wynnie"
#define TZ_INFO "WIB-7" 

InfluxDBClient client(INFLUXDB_URL, INFLUXDB_ORG, INFLUXDB_BUCKET, INFLUXDB_TOKEN, InfluxDbCloud2CACert);                
Point sensor("Energy Monitoring");    

//============================================== Firebase Def ==============================================
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define API_KEY "AIzaSyBeJnp38L3j_zP2dZ2w_ywWiGPo5mKO0yI"
#define USER_EMAIL "wynniegiovannie@gmail.com"
#define USER_PASSWORD "123456"
#define DATABASE_URL "https://electricalmanaged-default-rtdb.asia-southeast1.firebasedatabase.app/"

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
String uid;

String databasePath;
String volPath;
String ampPath;
String enPath;

//============================================== GPIO x VARIABLES ==============================================
#include <Filters.h>
#define EL1 23

float voltage;
float ampere;
float energy;

float testFrequency = 50;                     // signal frequency (Hz)
float windowLength = 100.0/testFrequency;     // how long to average the signal, for statistist
float intercept = 0;                          // adjust untuk kalibrasi
float slope = 0.01245;                        // adjust untuk kalibrasi
int Sensor_1 = 0;
unsigned long printPeriod = 1000;     //Refresh rate
unsigned long previousMillis = 0;

const int pinADC = A0;
int sensitivitas = 66; //tegantung sensor arus yang digunakan, yang ini 5A
int nilaiadc= 00;
int teganganoffset = 2500; //nilai pembacaan offset saat tidak ada arus yang lewat
double tegangan = 00;
double nilaiarus = 00;


//============================================================= VOID SETUP ==============================================
void setup()  
{
  Serial.begin(115200);

  Sensor_1 = analogRead(14);                // read the analog in value:

  pinMode(EL1, OUTPUT);
  digitalWrite(EL1, HIGH);  // Turn on the relay
  delay(1000);                    // Wait for 1 second
     
  WiFi.mode(WIFI_STA);                                          
  wifiMulti.addAP(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to wifi");  
                              
  while (wifiMulti.run() != WL_CONNECTED) 
  {
    Serial.print(".");
    delay(100);
  }
  
  Serial.println();

  firebaseinit();
  delay(5000);
  
  sensor.addTag("device", DEVICE);                                
  sensor.addTag("SSID", WIFI_SSID);

  timeSync(TZ_INFO, "pool.ntp.org", "time.nis.gov");                 

  if (client.validateConnection())                                
  {
    Serial.print("Connected to InfluxDB: ");
    Serial.println(client.getServerUrl());
  } 
  else 
  {
    Serial.print("InfluxDB connection failed: ");
    Serial.println(client.getLastErrorMessage());
  }
}

//============================================================= VOID LOOP ==============================================
void loop() 
{
 ZMPT();
ACS();

  energy = voltage*ampere / 1000;
  Serial.print("Energy: ");
  Serial.print(energy);
  Serial.println("kWh");
  delay(1000);
  
  //============================================================= InfluxDB
  sensor.clearFields();                                        
  sensor.addField("Voltage (V)", voltage); 
  delay(20);                        
  sensor.addField("Current (A)", ampere);  
  delay(20);
  sensor.addField("Energy (kWh)", energy);  
  delay(20);                           
                           

  if (wifiMulti.run() != WL_CONNECTED)                               //Check WiFi connection and reconnect if needed
    Serial.println("Wifi connection lost");

  if (!client.writePoint(sensor))                                    //Write data point
  {
    Serial.print("InfluxDB write failed: ");
    Serial.println(client.getLastErrorMessage());
  }

  fbdata();
}

//============================================================= FUNCTIONS ==============================================
void firebaseinit()//============================================================= FIREBASE INIT
{
  config.api_key = API_KEY;

  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);

  config.token_status_callback = tokenStatusCallback; 
  config.max_token_generation_retry = 5;

  Firebase.begin(&config, &auth);

  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }

  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);

  databasePath = "/UsersData/" + uid;

  // Update database path for sensor readings
  volPath = databasePath + "/From Arduino" + "/Voltage";
  ampPath = databasePath + "/From Arduino" + "/Current";
  enPath = databasePath + "/From Arduino" + "/Energy";
}

void sendInt(String path, float value)//============================================================= FIREBASE TX
{
  if (Firebase.RTDB.setFloat(&fbdo, path.c_str(), value))
  {
    Serial.print("Writing value: ");
    Serial.print (value);
    Serial.print(" on the following path: ");
    Serial.println(path);
    Serial.println("PASSED");
    Serial.println("PATH: " + fbdo.dataPath());
    Serial.println("TYPE: " + fbdo.dataType());
  }
  else 
  {
    Serial.println("FAILED");
    Serial.println("REASON: " + fbdo.errorReason());
  }
}

void fbdata()//============================================================= FIREBASE TX
{
    // Send readings to database:
    sendInt(volPath, voltage);
    sendInt(ampPath, ampere);
    sendInt(enPath, energy);
}

Void ZMPT() //============================================================= ZMPT
{
  RunningStatistics (inputStats);           
  inputStats.setWindowSecs( windowLength );
  inputStats.input(Sensor_1);                   // log to Stats function

  voltage= (intercept + slope * inputStats.sigma())*(49.3231) + 220; //Calibartions for offset and amplitude
  
  Serial.print("Voltage: ");
  Serial.print(voltage);
  Serial.println("V");
  delay(1000);
}

ACS()//============================================================= ACS
{
   data_olah();
  Serial.print("Nilai ADC yang terbaca = " );
  Serial.print(nilaiadc);
 
  Serial.print("\t tegangan (mV) = ");
  Serial.print(tegangan,3);
 
  Serial.print("\t Arus = ");
  Serial.println(nilaiarus,3);
 
  delay(1000);
}

void data_olah(){
  nilaiadc = analogRead(pinADC);
  tegangan = (nilaiadc / 1024.0) * 5000;
  nilaiarus = ((tegangan - teganganoffset) / sensitivitas);
}

